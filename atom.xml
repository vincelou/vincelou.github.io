<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kanggggg.github.io</id>
    <title>Kanggggg</title>
    <updated>2019-09-19T06:07:06.910Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kanggggg.github.io"/>
    <link rel="self" href="https://kanggggg.github.io/atom.xml"/>
    <subtitle>Hello world</subtitle>
    <logo>https://kanggggg.github.io/images/avatar.png</logo>
    <icon>https://kanggggg.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Kanggggg</rights>
    <entry>
        <title type="html"><![CDATA[Mac开发环境之NPM]]></title>
        <id>https://kanggggg.github.io/post/mac-kai-fa-huan-jing-zhi-npm</id>
        <link href="https://kanggggg.github.io/post/mac-kai-fa-huan-jing-zhi-npm">
        </link>
        <updated>2019-09-19T06:06:13.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://www.npmjs.com">NPM</a> 即 Node Package Manager，是NodeJS的包管理器，且是随同NodeJS一起安装的。</p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://www.npmjs.com">NPM</a> 即 Node Package Manager，是NodeJS的包管理器，且是随同NodeJS一起安装的。</p>
<!-- more -->
<ul>
<li><a href="https://nodejs.org/en/">Node.js 官网</a></li>
<li><a href="http://nodejs.cn">Node.js 中文网</a></li>
</ul>
<h2 id="安装">安装</h2>
<pre><code class="language-bash"># Homebrew安装Node
$ brew install node
</code></pre>
<h2 id="基本使用">基本使用</h2>
<pre><code class="language-bash">$ npm help &lt;term&gt; # 查看&lt;term&gt;帮助，exp. npm help install 查看install的帮助
$ npm ls [-g] # 查看安装的模块及依赖，option：[-g]全局
$ npm root [-g] #查看node_modules的路径，option：[-g]全局

# 安装包
$ npm install &lt;packageNmae&gt; [-g] # 安装，option：[-g]全局
$ npm uninstall &lt;packageNmae&gt; # 卸载
$ npm update &lt;packageNmae&gt; # 更新
</code></pre>
<p>以安装Hexo为例：</p>
<pre><code class="language-bash">$ npm install hexo [-g] # 安装，option：[-g]全局
$ npm uninstall hexo # 卸载
$ npm update hexo # 更新
</code></pre>
<h2 id="注意">注意</h2>
<ol>
<li>
<p>包下载不下来，需要更换源</p>
<pre><code class="language-bash">$ npm config set registry https://registry.npm.taobao.org --global
$ npm config set disturl https://npm.taobao.org/dist --global
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac开发环境之Ruby]]></title>
        <id>https://kanggggg.github.io/post/mac-kai-fa-huan-jing-zhi-ruby</id>
        <link href="https://kanggggg.github.io/post/mac-kai-fa-huan-jing-zhi-ruby">
        </link>
        <updated>2019-09-19T06:04:46.000Z</updated>
        <content type="html"><![CDATA[<p>Mac默认已经集成了Ruby环境，但是时间长了，难免版本过旧需要更新。</p>
<h2 id="rvm">RVM</h2>
<blockquote>
<p>RVM is a command-line tool which allows you to easily install, manage, and work with multiple ruby environments from interpreters to sets of gems.</p>
</blockquote>
<p><a href="http://www.rvm.io/">RVM</a> 即 Ruby Version Manager，它是一套命令行工具，可用来方便地安装、管理、切换Ruby环境。</p>
<ul>
<li><a href="https://ruby-china.org/">Ruby China</a></li>
</ul>
<h3 id="安装rvm">安装RVM</h3>
<pre><code class="language-bash"># 先安装RVM
$ curl -L get.rvm.io | bash -s stable

# 安装成功之后
$ source ~/.bashrc  
$ source ~/.bash_profile 

# 查看RVM版本
$ rvm -v
</code></pre>
<h3 id="基本使用">基本使用</h3>
<pre><code class="language-bash"># 查看现有Ruby版本
$ ruby -v

# 列出可安装的版本
$ rvm list known

# 安装版本
$ rvm install 2.3.0

# 切换版本
$ rvm use 2.3.0

# 设置默认版本
$ rvm use 2.3.0 --default

# 列出已安装的版本
$ rvm list

# 删除版本
$ rvm remove 2.3.0
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac开发环境之Homebrew]]></title>
        <id>https://kanggggg.github.io/post/mac-kai-fa-huan-jing-zhi-homebrew</id>
        <link href="https://kanggggg.github.io/post/mac-kai-fa-huan-jing-zhi-homebrew">
        </link>
        <updated>2019-09-19T06:02:57.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://brew.sh/index_zh-cn.html">Homebrew</a> ，macOS缺失的软件包管理器。实际上手之后，你会发现真的是不可获缺的，能方便地帮助我们完成包的安装、更新、卸载等等。</p>
]]></summary>
        <content type="html"><![CDATA[<p><a href="https://brew.sh/index_zh-cn.html">Homebrew</a> ，macOS缺失的软件包管理器。实际上手之后，你会发现真的是不可获缺的，能方便地帮助我们完成包的安装、更新、卸载等等。</p>
<!-- more -->
<h2 id="安装">安装</h2>
<pre><code class="language-bash">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>
<h2 id="基本使用">基本使用</h2>
<pre><code class="language-bash">$ brew update # 更新Homebrew
$ brew -v # 查看Homebrew版本
$ brew help [COMMAND] # 查看帮助

# 包
$ brew list # 查看已安装的包
$ brew search &lt;packageName&gt; # 查询可用包
$ brew install &lt;packageName&gt; # 安装包
$ brew uninstall &lt;packageName&gt; # 卸载包
$ brew upgrade &lt;packageName&gt; # 更新包
$ brew info &lt;packageName&gt; # 查看包信息
</code></pre>
<p>以安装git为例：</p>
<pre><code class="language-bash">$ brew search git # 查询
$ brew install git # 安装
$ brew uninstall git # 卸载
$ brew upgrade git # 更新
</code></pre>
<h2 id="注意">注意</h2>
<ol>
<li>
<p>错误提示 <code>Error: The /usr/local directory is not writable</code></p>
<pre><code class="language-bash">$ sudo chown -R $(whoami):admin /usr/local
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac开发工具之更强大的终端 iTerm2+Oh My Zsh]]></title>
        <id>https://kanggggg.github.io/post/mac-kai-fa-gong-ju-zhi-geng-qiang-da-de-zhong-duan-iterm2oh-my-zsh</id>
        <link href="https://kanggggg.github.io/post/mac-kai-fa-gong-ju-zhi-geng-qiang-da-de-zhong-duan-iterm2oh-my-zsh">
        </link>
        <updated>2019-09-19T05:41:37.000Z</updated>
        <summary type="html"><![CDATA[<p>在开发过程中，难免要用到终端运行命令的情况，一般Mac自带能满足需求了，但是俗话说工欲善其事必先利其器，作为一个开发，没有理由拒绝把终端变得更强。iTerm2 搭配 Oh My Zsh 或许就是答案。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在开发过程中，难免要用到终端运行命令的情况，一般Mac自带能满足需求了，但是俗话说工欲善其事必先利其器，作为一个开发，没有理由拒绝把终端变得更强。iTerm2 搭配 Oh My Zsh 或许就是答案。</p>
<!-- more -->
<h2 id="iterm2">iTerm2</h2>
<p><a href="https://www.iterm2.com/index.html">iTerm2</a></p>
<blockquote>
<p>iTerm2 is a replacement for Terminal and the successor to iTerm. It works on Macs with macOS 10.12 or newer. iTerm2 brings the terminal into the modern age with features you never knew you always wanted.</p>
</blockquote>
<p>安装的过程就不说了，下载下来，移动到Applications目录就好</p>
<p>在安装完成之后，你的终端就可以使用zsh了，Mac终端默认是使用bash，所以需要切换到zsh</p>
<pre><code class="language-bash">$ chsh -s /bin/zsh
</code></pre>
<h3 id="关于zsh和bash">关于zsh和bash</h3>
<p>zsh和bash都是一种shell，那么何为shell？</p>
<p><a href="http://cn.linux.vbird.org/linux_basic/0320bash.php#bash">鸟哥的Linux私房菜 第十一章、认识与学习 BASH</a></p>
<p>总结一下就是shell是壳，是用户与系统内核沟通的命令行解析器，再通俗点说其实也是一个应用，只是它是文字形式的，要做什么必须输入文字命令。</p>
<p>那么Mac支持有几种shell呢？</p>
<pre><code class="language-bash"># 查看支持的shell
$ cat /etc/shells

# 切换shell
$ chsh -s /bin/zsh

# 查看当前的shell
$ echo $SHELL
</code></pre>
<p>常见shell如下：</p>
<ul>
<li><code>/bin/sh</code>：Bourne shell，被 <code>bash</code> 取代</li>
<li><code>/bin/bash</code>：Bourne-Again Shell，用来替代Bourne shell，多数Linux以及MacOS的默认shell</li>
<li><code>/bin/ksh</code>：<a href="http://www.kornshell.com/info/">Korn shell</a>，兼容bash</li>
<li><code>/bin/csh</code>：语法类似C语言</li>
<li><code>/bin/tcsh</code>：csh增强版</li>
<li><code>/bin/zsh</code>：基于ksh，功能更强大的shell，很多其他shell的特点都被引入zsh</li>
</ul>
<h2 id="oh-my-zsh">Oh My Zsh</h2>
<p><a href="https://ohmyz.sh">Oh My Zsh</a><br>
<a href="https://github.com/robbyrussell/oh-my-zsh/">Oh My Zsh GitHub</a></p>
<blockquote>
<p>Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout...</p>
<p>“Oh My ZSH!”</p>
</blockquote>
<p>一句话，Oh My Zsh 是对zsh的功能扩展</p>
<h3 id="安装">安装</h3>
<ol>
<li>
<p>自动安装</p>
<pre><code class="language-bash">$ sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;
</code></pre>
</li>
<li>
<p>手动安装</p>
<pre><code class="language-bash">$ git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
$ cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc
</code></pre>
</li>
</ol>
<h3 id="配置">配置</h3>
<p>oh-my-zsh的配置文件是 <code>~/.zshrc</code>，每次变动了该文件，都需要 <code>source ~/.zshrc</code> 使配置生效</p>
<h3 id="插件">插件</h3>
<p>自带插件目录 <code>~/.oh-my-zsh/plugins</code>，也就是 <code>$ZSH/plugins</code><br>
三方插件目录 <code>~/.oh-my-zsh/custom/plugins</code>，也就是 <code>$ZSH_CUSTOM/plugins</code></p>
<h4 id="zsh-autosuggestions-命令补全">zsh-autosuggestions 命令补全</h4>
<p><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a></p>
<ol>
<li>下载到三方插件目录，<code>$ git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions</code></li>
<li>编辑 <code>~/.zshrc</code>，加入到 <code>plugins</code>，<code>plugins=(... zsh-autosuggestions)</code></li>
<li>使配置生效，<code>source ~/.zshrc</code></li>
</ol>
<h4 id="zsh-syntax-highlighting-语法高亮">zsh-syntax-highlighting 语法高亮</h4>
<p><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a></p>
<ol>
<li>下载到三方插件目录，<code>$ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</code></li>
<li>编辑 <code>~/.zshrc</code>，加入到 <code>plugins</code>，<code>plugins=(... zsh-syntax-highlighting)</code></li>
<li>在 <code>~/.zshrc</code> 的末尾加上 <code>source $ZSH_CUSTOM/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code></li>
<li>使配置生效，<code>source ~/.zshrc</code></li>
</ol>
<h3 id="主题">主题</h3>
<p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">主题列表</a></p>
<p>自带主题目录 <code>~/.oh-my-zsh/themes</code>，也就是 <code>$ZSH/themes</code><br>
三方主题目录 <code>~/.oh-my-zsh/custom/themes</code>，也就是 <code>$ZSH_CUSTOM/themes</code></p>
<p>设置主题的方法（以设置ys主题为例）：</p>
<ol>
<li>编辑 <code>~/.zshrc</code>，设置 <code>ZSH_THEME=&quot;ys&quot;</code></li>
<li>使配置生效，<code>source ~/.zshrc</code></li>
</ol>
<h4 id="agnoster">agnoster</h4>
<p>这个主题应该是网上比较常提到的主题，虽然也是自带的，不过配置这个主题相对麻烦些</p>
<ol>
<li>
<p>安装Poweline</p>
<pre><code class="language-bash">$ sudo easy_install pip # 安装pip，若已安装可忽略
$ pip install powerline-status --user
</code></pre>
</li>
<li>
<p>安装PowerFonts</p>
<pre><code class="language-bash">$ mkdir PowerFonts
$ cd PowerFonts
$ git clone https://github.com/powerline/fonts.git --depth=1
$ cd fonts
$ ./install.sh
$ cd ..
$ rm -rf fonts
</code></pre>
</li>
<li>
<p>修改iTerm2字体，<code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text</code> ，把字体设成 <code>Meslo LG</code>，比如 <code>Meslo LG S for Powerline</code></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac疑难杂症之解决安全与隐私没有允许任何来源选项]]></title>
        <id>https://kanggggg.github.io/post/mac-yi-nan-za-zheng-zhi-jie-jue-an-quan-yu-yin-si-mei-you-yun-xu-ren-he-lai-yuan-xuan-xiang</id>
        <link href="https://kanggggg.github.io/post/mac-yi-nan-za-zheng-zhi-jie-jue-an-quan-yu-yin-si-mei-you-yun-xu-ren-he-lai-yuan-xuan-xiang">
        </link>
        <updated>2019-09-19T05:28:42.000Z</updated>
        <summary type="html"><![CDATA[<p>目前最新的Mac OS下，每次打开一个从网上下载的应用，总会提示不安全，不能打开，解决办法是进到系统偏好设置 -&gt; 安全性与隐私里去打开。在老版本的Mac OS下的安全性与隐私里，允许从以下位置下载的应用设置成任何来源就不用每次去费时费力地每次去手动操作了，但是新版本已经没有这个选项了，我们要做的就是让这个选项出来。</p>
]]></summary>
        <content type="html"><![CDATA[<p>目前最新的Mac OS下，每次打开一个从网上下载的应用，总会提示不安全，不能打开，解决办法是进到系统偏好设置 -&gt; 安全性与隐私里去打开。在老版本的Mac OS下的安全性与隐私里，允许从以下位置下载的应用设置成任何来源就不用每次去费时费力地每次去手动操作了，但是新版本已经没有这个选项了，我们要做的就是让这个选项出来。</p>
<!-- more -->
<h2 id="解决办法">解决办法</h2>
<ol>
<li>
<p>打开终端Terminal</p>
</li>
<li>
<p>输入命令</p>
<pre><code class="language-bash">$ sudo spctl --master-disable
</code></pre>
</li>
<li>
<p>如果没见效，重启就好</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac疑难杂症之设置登录界面文字为中文]]></title>
        <id>https://kanggggg.github.io/post/mac-yi-nan-za-zheng-zhi-she-zhi-deng-lu-jie-mian-wen-zi-wei-zhong-wen</id>
        <link href="https://kanggggg.github.io/post/mac-yi-nan-za-zheng-zhi-she-zhi-deng-lu-jie-mian-wen-zi-wei-zhong-wen">
        </link>
        <updated>2019-09-19T02:57:52.000Z</updated>
        <summary type="html"><![CDATA[<p>最近我的Mac电脑在每次更新之后，总是出现登录界面英文，登录之后又是中文的情况。虽然没有什么大问题，但作为一个强迫症患者，这是绝对不允许的，no way！！！</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近我的Mac电脑在每次更新之后，总是出现登录界面英文，登录之后又是中文的情况。虽然没有什么大问题，但作为一个强迫症患者，这是绝对不允许的，no way！！！</p>
<!-- more -->
<h2 id="如何解决">如何解决</h2>
<ol>
<li>
<p>打开终端</p>
</li>
<li>
<p>输入命令</p>
<pre><code class="language-bash">$ sudo languagesetup
</code></pre>
</li>
<li>
<p>按照屏幕提示输入密码，再输入语言代码</p>
</li>
<li>
<p>重启</p>
</li>
</ol>
]]></content>
    </entry>
</feed>